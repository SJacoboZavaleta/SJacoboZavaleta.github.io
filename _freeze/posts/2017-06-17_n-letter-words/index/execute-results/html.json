{
  "hash": "3e943b9b2e4b0deb562120195159b979",
  "result": {
    "markdown": "---\ntitle: \"`n_letter_words` and a personal (publicly available) package\"\ndescription: |\n  How I created a handy function and a personal package\ndate: 2017-06-17\nauthor: \n  - name: Ella Kaye\n    url: https://twitter.com/ellamkaye\nsite-url: https://ellakaye.co.uk\nimage: ../../images/hex/EMK.png\nimage-alt: |\n  A hexagon with a bright pink outline. Inside it, the letters E, M and K in the \n  same bright pink, on a white background\ncategories:\n  - R\n  - package development\nopen-graph: true\ntwitter-card: true\n# uncomment lines below for different title and description to post\n#  title: |\n#  description: |\n# uncomment for different image to post\n#  image: |\n#  image-alt: |\n#  defaults to 500 x 500 summary: uncomment lines below for large card\n#  image-width: 600 \n#  image-height: 314\n#  card-style: summary_large_image \n#  image-width: 500\n#  image-height: 500\n#  card-style: summary\ndraft: false\n---\n\n::: {.cell}\n\n:::\n\n\n\nThere's a little R function that I wrote and packaged up to generate a vector or data frame of words of a given length. I find it useful in a wide variety of contexts and thought other might too. To kick off my new blog, here's a post about it.\n\nThe function, `n_letter_words`, came about because I wanted to be able to generate row and column names for a large matrix - didn't matter what they were, as long as they were unique. Since I was in the habit of using the built-in `LETTERS` vector to do this for small matrices, I naturally thought of using combinations of letters to do this in a larger case. In figuring out how to do this, as is so often the case, it was [stackoverflow](https://stackoverflow.com/questions/11388359/unique-combination-of-all-elements-from-two-or-more-vectors) to the rescue. There, I learnt about `expand.grid` and could then use some tidyverse tools to get the vector I was after:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nlibrary(tidyr)\nout <- expand.grid(LETTERS, LETTERS) %>%\n  as_tibble() %>%\n  unite(word, 1:2, sep = \"\") %>%\n  pull()\nc(head(out), tail(out))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"AA\" \"BA\" \"CA\" \"DA\" \"EA\" \"FA\" \"UZ\" \"VZ\" \"WZ\" \"XZ\" \"YZ\" \"ZZ\"\n```\n:::\n:::\n\n\nSorted! At least I thought so, until, a couple of months later, when I wanted to generate names for a 1000\\*1000 matrix, and realised both that I'd forgotten the `expand.grid` trick, and once I'd re-found the stackoverflow post, that it didn't give me enough words. That was enough to make it worth writing a function, taking `n` as an argument, that gives all 'words' of length $n$. \n\nWriting functions always makes me think of what other arguments might be useful. What if we want something between the 676 two-letter words and 17,576 three-letter words (or the 456,976 four-letter words, etc)? Hence the argument `num_letters`, which can be set between 1 and 26, and results in a total of `num_letters`$^n$ words. By default, the function returns a `tibble`, but setting `as_vector = TRUE` does what you'd expect. And I threw in a `case` argument too.\n\nNow that I had my function, what to do with it? I remembered articles I'd read about the usefulness of [making](https://hilaryparker.com/2014/04/29/writing-an-r-package-from-scratch/) and [sharing]((https://hilaryparker.com/2013/04/03/personal-r-packages/)) a personal package. Now seemed like the time to do that myself. \n\nSo, [here](https://github.com/EllaKaye/EMK) is my personal package, `EMK`. If you think that `n_letter_words` might be of use to you, then feel free to install!\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndevtools::install_github(\"EllaKaye/EMK\")\n```\n:::\n\n\nSome examples of `n_letter_words`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(EMK)\n\nn_letter_words(2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 676 × 1\n   word \n   <chr>\n 1 AA   \n 2 BA   \n 3 CA   \n 4 DA   \n 5 EA   \n 6 FA   \n 7 GA   \n 8 HA   \n 9 IA   \n10 JA   \n# … with 666 more rows\n```\n:::\n\n```{.r .cell-code}\nsome_three_letter_words <- n_letter_words(\n  n = 3, \n  num_letters = 10, \n  case = \"lower\", \n  as_vector = TRUE\n)\n\nc(head(some_three_letter_words), tail(some_three_letter_words))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"aaa\" \"baa\" \"caa\" \"daa\" \"eaa\" \"faa\" \"ejj\" \"fjj\" \"gjj\" \"hjj\" \"ijj\" \"jjj\"\n```\n:::\n\n```{.r .cell-code}\nlength(some_three_letter_words)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1000\n```\n:::\n:::\n\n\nFor now, my personal package has only this one function, but watch this space! No doubt I'll be adding more that I find useful. Perhaps, you'll find them useful too.\n\nIncidentally, none of the above would have happened if I'd just thought, for my test matrix `A`, to set `dimnames(A) <- list(1:nrow(A), 1:ncol(A))`!\n\n<!--------------- appendices go here ----------------->\n\n\n::: {.cell}\n::: {.cell-output-display}\n## Last updated {.appendix}\n \n2022-11-11 21:27:19 GMT\n \n## Details {.appendix}\n \n[source code](https://github.com/EllaKaye/ellakaye-quarto/tree/main/posts/2017-06-17_n-letter-words/index.qmd){target='_blank'}, [R environment](https://github.com/EllaKaye/ellakaye-quarto/tree/main/posts/2017-06-17_n-letter-words/renv.lock){target='_blank'}\n:::\n:::\n\n\n#### Session info {.appendix}\n\n<details><summary>Toggle</summary>\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.2.1 (2022-06-23)\n os       macOS Monterey 12.6.1\n system   aarch64, darwin20\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       Europe/London\n date     2022-11-11\n pandoc   2.19.2 @ /Applications/RStudio.app/Contents/Resources/app/quarto/bin/tools/ (via rmarkdown)\n quarto   1.2.247 @ /usr/local/bin/quarto\n\n─ Packages ───────────────────────────────────────────────────────────────────\n ! package     * version date (UTC) lib source\n P dplyr       * 1.0.10  2022-09-01 [?] CRAN (R 4.2.0)\n P EMK         * 0.1.0   2022-08-16 [?] Github (EllaKaye/EMK@a28e89e)\n P sessioninfo * 1.2.2   2021-12-06 [?] CRAN (R 4.2.0)\n P tidyr       * 1.2.0   2022-02-01 [?] CRAN (R 4.2.0)\n\n [1] /private/var/folders/xf/jb2591gj41xbj0c4y2d8_7ch0000gn/T/RtmpsJIstF/renv-library-1e576ca13792\n [2] /Users/ellakaye/Rprojs/mine/ellakaye-quarto/renv/library/R-4.2/aarch64-apple-darwin20\n [3] /Library/Frameworks/R.framework/Versions/4.2-arm64/Resources/library\n\n P ── Loaded and on-disk path mismatch.\n\n──────────────────────────────────────────────────────────────────────────────\n```\n:::\n:::\n\n\n</details>\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}