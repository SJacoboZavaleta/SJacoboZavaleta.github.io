{
  "hash": "c4803bf86030d4f5de625ff936449fa6",
  "result": {
    "markdown": "---\ntitle: Creating an animated CSS logo\ndescription: |\n  How and why I created an animated logo for this site, using CSS\ndate: 2023-03-01\nauthor: \n  - name: Ella Kaye\n    #url: https://fosstodon.org/@ellakaye\nsite-url: https://ellakaye.co.uk\n#image: IMAGE.png\n#image-alt: |\ncategories:\n  - Quarto\n  - CSS\nopen-graph: true\ntwitter-card: true\n# will inherit title, description, image\n# to change ANYTHING about card, need to fill in EVERYTHING below\n#  title: |\n#  description: |\n#  image: |\n#  image-alt: |\n#  defaults to 500 x 500 summary: uncomment lines below for large card\n#  image-width: 600 \n#  image-height: 314\n#  card-style: summary_large_image \n#  image-width: 500\n#  image-height: 500\n#  card-style: summary\ndraft: true\n---\n\n\n<!--------------- set up ----------------->\n\n\n::: {.cell}\n\n:::\n\n\n<!--------------- post content ----------------->\n\nIn my [previous post](../2022-12-11_welcome-quarto/index.qmd), \nI outlined a number of customisations I made to this personal website and promised a series of future blog posts on how I implemented them. \nThis is the first in the series, on the creation of the animated logo in the top left corner of the site. \nNote that for the animation to work properly, it needs to be viewed on a device with a mouse/trackpad, not a touchscreen.\n\n## The motivation for creating a CSS logo\n\nBefore I get to the details of *how* I created the animation, first a note on why. \nOn my previous site, built with {distill}, I had a static version of the same logo, saved as a .png. \nAs I was developing this site, I tweaked my colour scheme a lot, \nand each time I did so, I had to head back to my design software, update the image there, re-export it and reload the site. \nNeedless to say, that got tiresome. \n\nThat issue became even more pressing when I also implemented a dark mode. \nMy light mode logo, with its dark grey text, disappeared into the background of the dark mode. \nI needed a way to switch logos on light/dark toggle. \nI did find a [solution](https://github.com/quarto-dev/quarto-cli/discussions/1647), \nwhich used some hacky CSS to override the logo.png used in light mode with an alternative logo-dark.png in dark mode, \nbut now needed to manually edit two logo images whenever I tweaked the theme, \ndoubling my original problem.^[This hack does still provide a useful trick for people with logos that can't be created with HTML and styled with CSS but who nevertheless want to switch logos between light and dark modes.]\n\nI realised that if I could create and style the logo with HTML and CSS, \nit would solve both problems: \nit would automatically update along with any theme changes *and* \nI could theme separately in light and dark modes.\nIt would always be consistent with the appearance of the site.\n\nPlus, around the time I was grappling with these issues, I saw [Maya Gans](https://maya.rbind.io) tweet that she was working on a CSS animated logo for her site \nand I got excited by the possibility of figuring out how to do something similar: \nthe line separating my first and last name seemed destined to move on hover. \nI got in touch with Maya and she was fantastically helpful in assisting me with the implementation.\nThere was lots to troubleshoot!\n\n## Figuring out the HTML and yaml\n\nThe first challenge was figuring out the HTML to use in the title that would give me something to style for the line between the names. \nI needed my first name on top of my last name, but using either `<hr>` or `<br>` tags didn't work. \nIt seems there are some limits to the HTML that can be used in yaml with Quarto. \nWith `<hr>`, my last name was no longer displayed. \nUsing `<br>` did give something to work with, at least that displayed on Chrome, \nbut not on my default browser Safari. \nIt turned out that `<span>` did the trick, with the addition of a class I could apply a CSS style to.\nThe title became `ELLA<span class='icon-line'></span>KAYE`.\n\nWith that as my website title and with CSS applied, the logo looked as I wanted, \nbut the title in the browser tab also read `ELLA<span class='icon-line'></span>KAYE`, \nwhich wasn't great. \nAfter some digging, I found it was possible to set the navbar title separately from the website title:\n\n```{.yaml}\nwebsite:\n  title: \"Ella Kaye\"\n  navbar:\n    title: \"ELLA<span class='icon-line'></span>KAYE\"\n```\n\nThat solves the problem. \nThe browser tab shows \"Ella Kaye\" but the title of the navbar becomes the logo, \nwith its span that can be styled.\nThe title of the website is also important if you have an RSS feed for your blog,\nwhich is another reason not to have additional HTML in it.\n\n## Theming the (static) logo\n\n:::{.callout-note}\nThis section assumes a little bit of familiarity with CSS and Quarto themes.\nIf these are new to you, I recommend first reading the 'Style your blog' section of Albert Rapp's epic ['Ultimate Guide to Starting a Quarto blog'](https://albert-rapp.de/posts/13_quarto_blog_writing_guide/13_quarto_blog_writing_guide.html#style-your-blog) post,\nand watching the accompanying [video](https://www.youtube.com/watch?v=ErRX8plZpQE),\nwhich dives into how to customise the appearance of your site.\nThe [official Quarto docs](https://quarto.org/docs/output-formats/html-themes.html) on HTML themes is also really useful.\nFor learning CSS more generally, [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS) is a comprehensive resource.\n:::\n\nI gave the span separating my first and last names in the logo the class `icon-line`,\nso I can target that to style it. I have custom themes for my light and dark modes, \nin the files [`ek-theme-light.scss`](https://github.com/EllaKaye/ellakaye.co.uk/blob/main/assets/ek-theme-light.scss) and [`ek-theme-dark.scss`](https://github.com/EllaKaye/ellakaye.co.uk/blob/main/assets/ek-theme-dark.scss) respectively. I have the following rule in both files:\n\n```{.scss}\n.icon-line {\n  display: block;\n  background: $primary;\n  width: 100%;\n  height: 6px;\n  margin: auto;\n  display: table;\n  margin-top: -6px;\n  margin-bottom: -6px;\n}\n```\n\nIt's a bit of a pain to have to define this rule, identically, in both `.scss` files,\nbut it's necessary because of setting `background: $primary;`. \nThis is what ensures that the icon-line changes colour when light/dark mode is toggled.\n`$primary` is a Sass variable that is set to be the main accent colour.\nIt is pink in light mode and green in dark mode. \nThis is achieved by defining the following variable in `ek-theme-light.scss`:\n\n```{.sass}\n$pink:      #D4006A;\n$primary:   $pink !default;\n```\n\nand similarly in `ek-theme-dark.scss`: \n\n```{.sass}\n$green:     #00D46A;\n$primary:   $green !default;\n```\n\nBecause `$primary` is defined differently for the two themes, \nthe rule for `.icon-line` has to appear in both theme files to pick up that difference.\n\nThe other important property to note in the `.icon-line` rule that of `width: 100%`.\nThis ensures that the line occupies the full width of the `navbar-title`. \nThis is the property that we will change with the animation.\n\n\n\n## Setting up the CSS animation\n\nAlthough, as explained above, the styling of the `icon-line` has to appear in the two `.scss` files,\nthe animation is applied the same way in both light and dark mode and, \nmoreover, is created with pure CSS (i.e. without using any special features of Sass).\nTherefore the code for the animation lives in my `ek-styles.css` file.\n\nThe code for the animation is in two parts.\nThe first part selects what we want to animate and when,\nhow long the animation should last and what the animation is called:\n\n```{.css}\n.navbar-title:hover > .icon-line {\n  animation-duration: 600ms;\n  animation-name: line-expand;\n}\n```\n\nThe line `.navbar-title:hover > .icon-line` is the selector, \ni.e. defines what we want to style.\nAs described above, in `_quarto.yml`, we set the logo to be the title of the navbar.\nThat translates to the CSS class `navbar-title`.[^inspector] \nIn CSS, we define a rule for a class by prefixing the class name with a `.`, \ni.e. `.navbar-title`. The suffix `:hover` means that the rule is activated\nwhen the cursor hovers over the navbar title. \nBut it's not the whole logo we want to animate, \njust the element with the class `icon-line` within it,\nwhich is what the `> .icon-line` part of the selector does. \nPutting that all together, the selector `.navbar-title:hover > .icon-line` translates to \n'when hovering over the navbar title, select the icon-line within it'.\n\n[^inspector]: We can determine the class of an element by right-clicking on it in a browser\nthen selecting 'Inspect' or 'Inspect element' (depending on the browser) from the drop-down list.\nThis opens up developer mode and will highlight the element you're inspecting,\nfrom which you can read off the class. Albert Rapp's [video](https://www.youtube.com/watch?v=ErRX8plZpQE) (also mentioned above)\ndemonstrates how to do this.\n\nNow that we've selected what we want to animate,\nwe can define some key properties of how we want the animation to progress\n(though not yet the appearance of the animation).\nIn particular, we say we want the animation to last 600ms.\nWe also name the animation, which is important, \nbecause we use the name later when defining what the animation actually does.\n\nThis brings us to the second part of the code for the animation:\n\n```{.css}\n@keyframes line-expand {\n  from {\n    width: 0%;\n  }\n  \n  to {\n    width: 100%;\n  }\n}\n```\n\nHere, we use the `@keyframes` at-rule, with the name of the animation set above, \nto define the appearance of the animation.\n`from` indicates what we want the appearance to be at the beginning of the animation,\nand `to` indicates the same for the end.\nFor my logo, I want to change the width of the line in the icon (i.e. the span with class `icon-line`). \nAt the beginning of the animation, I want it to disappear (i.e. have a width of 0%),\nthen by the end, the width has returned to 100%, the same as in its static state.\n\nFor more information on creating CSS animations, see the [MDN docs](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Animations/Using_CSS_animations).\nMy logo animation is just about as simple as a CSS animation can be.\nThe above docs explain more of the theory and delve into more complicated examples.\n\n## Applying the theme and animation\n\nThe rules relating to the styling and animation of the logo appear in three different files.\nIn order to apply them to the site, these need to be declared on the website's `_quarto.yml` file.\nFor this site, the `.scss` and `.css` files live in the `assets` directory, \nand they're set in `_quarto.yml` as follows:\n\n```{.yaml}\nformat:\n  html:\n    theme: \n      light: assets/ek-theme-light.scss\n      dark: assets/ek-theme-dark.scss\n    css: assets/ek-styles.css\n```\n\n## Conclusion\n\nThat's it! \nWe've used HTML in the navbar title to create a logo,\nstyled the static version in our light and dark themes,\napplied a CSS animation in a separate .css file\nand made sure all the files are linked properly in `_quarto.yml` so they apply to the site.\n\nI was thrilled recently to receive an e-mail from Matthieu Hanf letting me know that he'd found the repo for my site useful when creating his. \nHis [site](https://mhanf.netlify.app) is really cool and also features a navbar title logo that animates on hover.\n\nIf you have an animated logo on your site, please comment below with a link to it.\nIt'd love to see!\n\n## TODO\n\n- Check yaml for post\n- Update date in yaml `long_slug` and in folder name and update `_redirects`\n- Add an image\n- Change draft status\n\n<!--------------- appendices go here ----------------->\n\n\n::: {.cell}\n::: {.cell-output-display}\n## Last updated {.appendix}\n \n2023-04-10 21:41:06 BST\n \n## Details {.appendix}\n \n[source code](https://github.com/EllaKaye/ellakaye.co.uk/tree/main/posts/2023-03-01_animated-logo/index.qmd){target='_blank'}, [R environment](https://github.com/EllaKaye/ellakaye.co.uk/tree/main/posts/2023-03-01_animated-logo/renv.lock){target='_blank'}\n:::\n:::\n\n\n##### Session info {.appendix}\n\n<details><summary>Toggle</summary>\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.2.2 (2022-10-31)\n os       macOS Ventura 13.3\n system   aarch64, darwin20\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       Europe/London\n date     2023-04-10\n pandoc   2.19.2 @ /Applications/RStudio.app/Contents/Resources/app/quarto/bin/tools/ (via rmarkdown)\n quarto   1.3.250 @ /usr/local/bin/quarto\n\n─ Packages ───────────────────────────────────────────────────────────────────\n ! package     * version date (UTC) lib source\n P sessioninfo * 1.2.2   2021-12-06 [?] CRAN (R 4.2.0)\n\n [1] /Users/ellakaye/Rprojs/mine/ellakaye-quarto/renv/library/R-4.2/aarch64-apple-darwin20\n [2] /Users/ellakaye/Rprojs/mine/ellakaye-quarto/renv/sandbox/R-4.2/aarch64-apple-darwin20/fd29d0b8\n\n P ── Loaded and on-disk path mismatch.\n\n──────────────────────────────────────────────────────────────────────────────\n```\n:::\n:::\n\n\n</details>\n\n\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}