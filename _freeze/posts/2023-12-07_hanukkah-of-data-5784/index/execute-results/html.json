{
  "hash": "424d4fb89a3e6dacba4f03b784c7ac31",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Hanukkah of Data, 5784\"\ndescription: |\n  Hanukkah of Data is a fun and delightful coding challenge that requires an investigative mindset. Here are my solutions and reflections on the puzzles and overall experience.\ndate: 2023-12-07\nauthor: \n  - name: Ella Kaye\n#    url: https://fosstodon.org/@ellakaye\nsite-url: https://ellakaye.co.uk\nimage: hanukkah-of-data-menorah.jpeg\nimage-alt: |\n  An ASCII art image of a menorah. The shamash and first candle are lit. There's an unlit candle for the second night. The remaining candle holders are empty.\ncategories: [Hanukkah of Data, R, tidyverse]\nopen-graph: true\ndraft: false\ntab-stop: 2\n---\n\n\n<!--------------- set up ----------------->\n\n\n::: {.cell}\n\n:::\n\n\n<!--------------- post content ----------------->\n\n[Hanukkah of Data](https://hanukkah.bluebird.sh) is a data/coding challenge, \nwith one puzzle released daily throughout the eight days of Hanukkah.\nIt has a lot in common with the much better known [Advent of Code](https://adventofcode.com), telling a story over a series of days.\nHanukkah of Data uses the same data set for each puzzle, representing a database, \t\tand our task is to find a certain piece of information in it each day.\nIt takes exploring the data and also a certain amount of investigation beyond the data, \nas we'll see throughout the puzzles.\n\nIn this post, I'll record my solutions for each puzzle, and how the code links to the puzzle text.\nHowever, getting to the solution for each day can be pretty involved,\nexploring several avenues then needing to think again, to find another clue in the puzzle text. \nThe whole process is a lot of fun, but I won't record in this post everything I did.\nMy full workings are documented in commented [R scripts](https://github.com/EllaKaye/HanukkahOfData/tree/main/5784/scripts).\nI'm using the [**tidyverse**](https://www.tidyverse.org) to solve the puzzles. \nThis, for me, is a nice complement to Advent of Code, \nwhich I'm primarily attempting to solve in base R this year, \nand keeping a record of my solutions on a [dedicated site](https://adventofcode.ellakaye.co.uk).\n\nAlso of interest with Hanukkah of Data is the looming challenge of the speed-run: \nafter the eight nights, we get to go through all the puzzles again.\nWe're told that the puzzles will be the same, but that the underlying data set is more \"challenging\". \nHowever, according to the website, we \"should be able to complete the puzzles handily and in record time–if the solutions you crafted the first time weren’t just lucky guesses!\"\nSo, in anticipation of the speed-run, I wrapped all my code for each day inside a function, \nto make it easy to rerun. \nIt turned out that the text for the speedrun *wasn't* exactly the same.\nI had to refactor my functions slightly as I went through again.\nThe functions in the post below are my final solutions\nthat give the right answers for both the initial game and the speedrun. \n\n\n## The shamash\n\n::: {.callout-note collapse=\"false\" icon=\"false\"}\n## Full puzzle text: Noah's Market\nNoah’s Market\n\nWelcome to “Noah’s Market”, a bustling mom-and-pop everything store in Manhattan. In recent years it’s become quite an operation, but they’re still running on the same database your cousin Alex set up at the start of 2017.\n\nThis morning, while waiting for your breakfast bagel, your Aunt Sarah pulled you aside in a hustle.\n\n“You know how Noah’s been talking recently about that rug we used to have?”\n\nShe looked over at Noah, who was talking to a customer: “Such a beautiful carpet, with the most intricate design! I miss having it in my den. It has this vibrant beehive buzzing in the corner…”\n\nSarah explained, “Noah entrusted me with that rug when he was remodeling his den a few years ago. It was so old and filthy, that I sent it to the cleaners, but then I completely forgot about it. Now, with Noah retiring and me taking over the store, he wants it back. So yesterday I freaked out and combed my apartment, and I finally found a claim ticket saying, ‘All items must be picked up within 90 days.’ At the cleaners, they didn’t have the rug, just the other half of the ticket.”\n\nSarah added, “I need to find that rug before Noah comes over on the last night of Hanukkah. I have an idea but I need some help, and Alex will be busy for weeks doing those Advent of Code challenges.\n\n“Do you think you could help me track down the rug?”\n\nShe hands you a USB drive labeled “Noah’s Market Database Backup”.\n\n“Alex set up the backups to be password-protected. I can never remember the password itself, but it’s just the year in the Hebrew calendar when Alex set up the database.”\n\nWhat’s the password to open the .zip files on the USB drive?\n:::\n\n::: {.callout-note collapse=\"false\" icon=\"false\"}\n## The crux of the puzzle\nWhat was the Hebrew year at the start of 2017?\n:::\n\nWe're in 2023, and the Hebrew year is 5784, so it might be tempting to think we need to find six years earlier than that, 5778. However, Rosh Hashanah (Jewish New Year), always falls in September or October of the Gregorian calendar (in 2017 Rosh Hashanah began on September 20th). Since we need the Hebrew year at the *start* of 2017, the answer is **5777**.\n\nThe shamash is lit. Happy Hanukkah!\n\n## The data\n\nThe answer above, **5777**, also decrypts the USB drive which gives us access to the database.\nIt contains four .csv files. \nSince they're the same for all puzzles, let's read them in and take a glimpse at them now.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nlibrary(tidyverse)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\ncustomers <- read_csv(\"data/noahs-customers.csv\")\norders <- read_csv(\"data/noahs-orders.csv\")\norders_items <- read_csv(\"data/noahs-orders_items.csv\")\nproducts <- read_csv(\"data/noahs-products.csv\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nglimpse(customers)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 8,260\nColumns: 9\n$ customerid   <dbl> 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 101…\n$ name         <chr> \"Jacqueline Alvarez\", \"Julie Howell\", \"Christopher Ali\", …\n$ address      <chr> \"105N Elizabeth St\", \"185-1 Linden St\", \"174-28 Baisley B…\n$ citystatezip <chr> \"Manhattan, NY 10013\", \"Brooklyn, NY 11221\", \"Jamaica, NY…\n$ birthdate    <date> 1958-01-23, 1956-12-03, 2001-09-20, 1959-07-10, 1988-09-…\n$ phone        <chr> \"315-377-5031\", \"680-537-8725\", \"315-846-6054\", \"516-275-…\n$ timezone     <chr> \"America/New_York\", \"America/New_York\", \"America/New_York…\n$ lat          <dbl> 40.71817, 40.69426, 40.68902, 40.84939, 40.72804, 40.6809…\n$ long         <dbl> -73.99747, -73.92167, -73.77347, -73.90916, -73.98712, -7…\n```\n\n\n:::\n\n```{.r .cell-code  code-fold=\"false\"}\nglimpse(orders)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 213,232\nColumns: 6\n$ orderid    <dbl> 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010,…\n$ customerid <dbl> 6878, 6375, 8045, 5385, 9235, 8414, 4285, 5725, 5294, 1801,…\n$ ordered    <dttm> 2017-01-31 02:56:45, 2017-01-31 04:13:35, 2017-01-31 04:45…\n$ shipped    <dttm> 2017-01-31 09:00:00, 2017-01-31 12:15:00, 2017-01-31 10:45…\n$ items      <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ total      <dbl> 0.99, 13.59, 1.23, 2.10, 13.23, 2.03, 3.58, 1.32, 23.63, 10…\n```\n\n\n:::\n\n```{.r .cell-code  code-fold=\"false\"}\nglimpse(orders_items)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 426,541\nColumns: 4\n$ orderid    <dbl> 1001, 1002, 1002, 1003, 1004, 1005, 1005, 1005, 1005, 1005,…\n$ sku        <chr> \"PET4571\", \"PET4491\", \"TOY7498\", \"PET5509\", \"PET3929\", \"PET…\n$ qty        <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1,…\n$ unit_price <dbl> 0.99, 1.08, 12.51, 1.23, 2.10, 1.67, 1.84, 1.16, 1.23, 1.64…\n```\n\n\n:::\n\n```{.r .cell-code  code-fold=\"false\"}\nglimpse(products)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 1,278\nColumns: 4\n$ sku            <chr> \"PET0002\", \"PET0006\", \"PET0019\", \"PET0023\", \"PET0027\", …\n$ desc           <chr> \"Wet Cat Food, Tuna & Tuna\", \"Vegan Adult Cat Food, Chi…\n$ wholesale_cost <dbl> 0.89, 1.41, 0.89, 1.47, 1.03, 28.32, 2487.35, 0.97, 33.…\n$ dims_cm        <chr> \"16.1|5.5|3.2\", \"19.9|16.9|0.3\", \"18.6|8.7|7.2\", \"17.4|…\n```\n\n\n:::\n:::\n\n\n\n## Candle 1\n\n::: {.callout-note collapse=\"false\" icon=\"false\"}\n## Full puzzle text: The Investigator\n\nSarah brought a cashier over. She said, “Joe here says that one of our customers is a skilled private investigator.”\n\nJoe nodded, “They showed me their business card, and that’s what it said. Skilled Private Investigator. And their phone number was their last name spelled out. I didn’t know what that meant, but apparently before there were smartphones, people had to remember phone numbers or write them down. If you wanted a phone number that was easy-to-remember, you could get a number that spelled something using the letters printed on the phone buttons: like 2 has “ABC”, and 3 “DEF”, etc. And I guess this person had done that, so if you dialed the numbers corresponding to the letters in their name, it would call their phone number!\n\n“I thought that was pretty cool. But I don’t remember their name, or anything else about them for that matter. I couldn’t even tell you if they were male or female.”\n\nSarah said, “This person seems like they are skilled at investigation. I need them to find Noah’s rug before the Hanukkah dinner. I don’t know how to contact them, but apparently they shop here at Noah’s Market.”\n\nShe nodded at the USB drive in your hand.\n\n“Can you find this investigator’s phone number?”\n:::\n\n::: {.callout-note collapse=\"false\" icon=\"false\"}\n## The crux of the puzzle\nThe investigator is someone who, \nif you dialled the numbers corresponding to the letters in their last name, \nit would call their phone number. \nFind that phone number.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncandle1 <- function(customers) {\n  customers |> \n    select(name, phone) |> \n    separate_wider_delim(name, delim = \" \", \n                         names = c(\"first\", \"last\"), \n                         too_many = \"merge\") |> \n    mutate(phone_numbers = str_remove_all(phone, \"-\")) |> \n    mutate(last_phone = str_replace_all(last, \"[a-cA-C]\", \"2\")) |> \n    mutate(last_phone = str_replace_all(last_phone, \"[d-fD-F]\", \"3\")) |> \n    mutate(last_phone = str_replace_all(last_phone, \"[g-iG-I]\", \"4\")) |> \t\n    mutate(last_phone = str_replace_all(last_phone, \"[j-lJ-L]\", \"5\")) |> \t\n    mutate(last_phone = str_replace_all(last_phone, \"[m-oM-O]\", \"6\")) |> \t\n    mutate(last_phone = str_replace_all(last_phone, \"[p-sP-S]\", \"7\")) |> \t\n    mutate(last_phone = str_replace_all(last_phone, \"[t-vT-V]\", \"8\")) |> \t\n    mutate(last_phone = str_replace_all(last_phone, \"[w-zW-Z]\", \"9\")) |> \n    filter(phone_numbers == last_phone) |> \n    pull(phone)\n}\n\ninvestigator <- candle1(customers)\ninvestigator\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"826-636-2286\"\n```\n\n\n:::\n:::\n\n\n## Candle 2\n\n::: {.callout-note collapse=\"false\" icon=\"false\"}\n## The full puzzle text: The Contractor\nThanks to your help, Sarah called the investigator that afternoon. The investigator went directly to the cleaners to see if they could get any more information about the unclaimed rug.\n\nWhile they were out, Sarah said, “I tried cleaning the rug myself, but there was this snail on it that always seemed to leave a trail of slime behind it. I spent a few hours cleaning it, and the next day the slime trail was back.”\n\nWhen the investigator returned, they said, “Apparently, this cleaner had a special projects program, where they outsourced challenging cleaning projects to industrious contractors. As they’re right across the street from Noah’s, they usually talked about the project over coffee and bagels at Noah’s before handing off the item to be cleaned. The contractors would pick up the tab and expense it, along with their cleaning supplies.\n\n“So this rug was apparently one of those special projects. The claim ticket said ‘2017 JP’. ‘2017’ is the year the item was brought in, and ‘JP’ is the initials of the contractor.\n\n“But they stopped outsourcing a few years ago, and don’t have contact information for any of these workers anymore.”\n\nSarah first seemed hopeless, and then glanced at the USB drive you had just put back in her hand. She said, “I know it’s a long shot, but is there any chance you could find their phone number?”\n:::\n\n::: {.callout-note collapse=\"false\" icon=\"false\"}\n## The crux of the puzzle\nThe contractor is the person with the initials JP who, in 2017, \nbought coffee and bagels in the same order.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncandle2 <- function(customers, orders, orders_items, products, \n                    first_initial_regex, second_initial_regex) {\n\tcustomers |> \n\t\tseparate_wider_delim(name, delim = \" \", \n\t\t                     names = c(\"first\", \"last\"), \n\t\t                     too_many = \"merge\") |> \n\t\tfilter(str_detect(first, first_initial_regex)) |> \n\t\tfilter(str_detect(last, second_initial_regex)) |> \n\t\tinner_join(orders, by = \"customerid\") |> \n\t\tfilter(str_detect(ordered, \"2017\")) |> \n\t\tinner_join(orders_items, by = \"orderid\") |> \n\t\tinner_join(products, by = \"sku\") |> \n\t\tselect(phone, orderid, desc) |> \n\t\tgroup_by(phone, orderid) |> \n\t\tfilter(any(str_detect(desc, \"Coffee\")) & \n\t\t       any(str_detect(desc, \"Bagel\"))) |> \n\t\tdistinct(phone) |> \n\t\tpull(phone)\n}\n\ncontractor <- candle2(customers, orders, orders_items, products, \"^J\", \"^P\")\ncontractor\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"332-274-4185\"\n```\n\n\n:::\n:::\n\n\nThe ability to filter on any pair of initials was introduced for the speedrun.\n\nI noticed the clue about 'coffee and bagels' before absorbing the one about the cleaning supplies.\nWhen I read some other solutions after completing my own, I realised that there is also \"Rug Cleaner\"\namongst the products that Noah sells, \nand that would have been a slightly easier way to the same solution.\nI'm not adjusting my solution, though, because I like coffee and bagels more than I like cleaning!\n\n## Candle 3\n\n::: {.callout-note collapse=\"false\" icon=\"false\"}\n## Full puzzle text: The Neighbor\nSarah and the investigator were very impressed with your data skills, as you were able to figure out the phone number of the contractor. They called up the cleaning contractor straight away and asked about the rug.\n\n“Oh, yeah, I did some special projects for them a few years ago. I remember that rug unfortunately. I managed to clean one section, which revealed a giant spider that startled me whenever I tried to work on it.\n\n“I already had a fear of spiders before this, but this spider was so realistic that I had a hard time making any more progress. I kept expecting the cleaners would call for the rug, but they never did. I felt so bad about it, I couldn’t face them, and of course they never gave me another project.\n\n“At last I couldn’t deal with the rug taking up my whole bathtub, so I gave it to this guy who lived in my neighborhood. He said that he was naturally intuitive because he was a Cancer born in the year of the Rabbit, so maybe he was able to clean it.\n\n“I don’t remember his name. Last time I saw him, he was leaving the subway and carrying a bag from Noah’s. I swore I saw a spider on his hat.”\n\nCan you find the phone number of the person that the contractor gave the rug to?\n:::\n\n::: {.callout-note collapse=\"false\" icon=\"false\"}\n## The crux of the puzzle\nThe neighbor is the person who lives in the same neighborhood as the contractor, who was born in the year of the Rabbit and whose astrological sign is Cancer.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncandle3 <- function(customers, contractor, years, first_month) { \n\t\n\tneighborhood <- customers |> \n\t\tfilter(phone == contractor) |> \n\t\tpull(citystatezip)\n\t\n\tcustomers |> \n\t\tfilter(year(birthdate) %in% years) |> \n\t\tfilter(month(birthdate) == first_month & day(birthdate) >= 21 | \n\t\t       month(birthdate) == (first_month + 1) & day(birthdate) <= 22) |> \n\t\tfilter(citystatezip == neighborhood) |> \n\t\tpull(phone)\n\t\n}\n\nyears_rabbit <- c(1939, 1951, 1963, 1975, 1987, 1999, 2011)\nneighbor <- candle3(customers, contractor, years_rabbit, 6)\nneighbor\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"917-288-9635\"\n```\n\n\n:::\n:::\n\n\nThe ability to filter on any of the 12-year cycle of animals that appear in the Chinese Zodiac,\nas well as for any astrological sign, was introduced for the speedrun.\n\nI like being able to use the `year()` and `month()` functions from the **lubridate** package \nto be able to filter on particular parts of a `Date` without needing to separate them out into their own columns first. This was new to me.\n\n## Candle 4\n\n::: {.callout-note collapse=\"false\" icon=\"false\"}\n## Full puzzle text: The Early Bird\nThe investigator called the phone number you found and left a message, and a man soon called back:\n\n“Wow, that was years ago! It was quite an elegant tapestry.\n\n“It took a lot of patience, but I did manage to get the dirt out of one section, which uncovered a superb owl. I put it up on my wall, and sometimes at night I swear I could hear the owl hooting.\n\n“A few weeks later my bike chain broke on the way home, and I needed to get it fixed before work the next day. Thankfully, this woman I met on Tinder came over at 5am with her bike chain repair kit and some pastries from Noah’s. Apparently she liked to get up before dawn and claim the first pastries that came out of the oven.\n\n“I didn’t have any money or I would’ve paid her for her trouble. She really liked the tapestry, though, so I wound up giving it to her.\n\n“I don’t remember her name or anything else about her.”\n\nCan you find the bicycle fixer’s phone number?\n:::\n\n::: {.callout-note collapse=\"false\" icon=\"false\"}\n## The crux of the puzzle\nThe Early Bird is the person who likes to get up before dawn and claim the first pastries from the oven. \nShe has pastries (plural) by 5am, and the puzzle text suggests she has done this multiple times.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncandle4 <- function(customers, orders, orders_items) {\n  orders |> \n    filter(hour(shipped) == 4) |> # received between 4am and 5am\n    inner_join(orders_items, by = \"orderid\") |> \n    filter(str_detect(sku, \"BKY\")) |>  # bakery items\n    summarise(n_pastries = sum(qty), .by = \"orderid\") |> \n    filter(n_pastries > 1) |> # has bought more than one pastry in the order\n    inner_join(orders, by = \"orderid\") |> \n    count(customerid) |> \n    slice_max(n) |> # the person who has done this most often\n    inner_join(customers, by = \"customerid\") |> \n    pull(phone)\t\n}\n\nearly_bird <- candle4(customers, orders, orders_items)\nearly_bird\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"607-231-3605\"\n```\n\n\n:::\n:::\n\n\nI had fun today learning more about traditional Jewish pastries.\nI was already a fan of [rugelach](https://en.wikipedia.org/wiki/Rugelach) and [babka](https://en.wikipedia.org/wiki/Babka) and that was a jumping off point for deeper exploration (hamentash, sufganiah, mandelbrot). Yum! Got to love a coding challenge that gives [credit](https://hanukkah.bluebird.sh/credits/) for deli consulting.\n\n## Candle 5\n\n::: {.callout-note collapse=\"false\" icon=\"false\"}\n## Full puzzle text: The Cat Lady\n\n“Yes, I did have that tapestry for a little bit. I even cleaned a blotchy section that turned out to be a friendly koala.\n\n“But it was still really dirty, so when I was going through a Marie Kondo phase, I decided it wasn’t sparking joy anymore.\n\n“I listed it on Freecycle, and a woman in Staten Island came to pick it up. She was wearing a ‘Noah’s Market’ sweatshirt, and it was just covered in cat hair. When I suggested that a clowder of cats might ruin such a fine tapestry, she looked at me funny. She said “I only have ten or eleven cats, and anyway they are getting quite old now, so I doubt they’d care about some old rug.”\n\n“It took her 20 minutes to stuff the tapestry into some plastic bags she brought because it was raining. I spent the evening cleaning my apartment.”\n\nWhat’s the phone number of the woman from Freecycle?\n:::\n\n::: {.callout-note collapse=\"false\" icon=\"false\"}\n## The crux of the puzzle\nThe cat lady has many old cats. \nFind the person who has bought the most senior cat food in a single order.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncandle5 <- function(customers, orders, orders_items, products) {\n  customers |> \n    inner_join(orders, by = \"customerid\") |> \n    inner_join(orders_items, by = \"orderid\") |> \n    inner_join(products, by = \"sku\") |> \n    filter(str_detect(desc, \"Senior Cat\")) |> \n    summarise(qty_cat_food = sum(qty), .by = c(phone, orderid))|> \n    select(-orderid) |> \n    distinct() |> \n    slice_max(qty_cat_food) |> \n    pull(phone) \n}\n\ncat_lady <- candle5(customers, orders, orders_items, products)\ncat_lady\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"631-507-6048\"\n```\n\n\n:::\n:::\n\n\nWe're told she's from Staten Island, and I originally filtered the customers for that, which got the right answer first time round, but there's no mention of where the cat lady is from in the speedrun, so I took it out (leaving it in gives the wrong answer on the speedrun).\n\nThere's also a big red herring in the text today, the fact that she's wearing a sweatshirt from Noah's Market. \nI originally looked for someone who had bought both a \"Noah's Jersey\" and cat food, \nbut that didn't give any correct answers.\nIn fact, it turns out the Cat Lady hasn't purchased a Noah's sweatshirt (perhaps she'd been gifted one).\nThis was the day I realised that I needed to pay attention to the title of the puzzle: \nthe cats are the important thing today.\n\nIn retrospect, I suspect that the mention of Noah's sweatshirt was to encourage us to see in the product list an item that comes in many colours.\nThat would prove useful for Candle 7.\n\n## Candle 6\n\n::: {.callout-note collapse=\"false\" icon=\"false\"}\n## Full puzzle text: The Bargain Hunter\n\n“Why yes, I did have that rug for a little while in my living room! My cats can’t see a thing but they sure chased after the squirrel on it like it was dancing in front of their noses.\n\n“It was a nice rug and they were surely going to ruin it, so I gave it to my cousin, who was moving into a new place that had wood floors.\n\n“She refused to buy a new rug for herself–she said they were way too expensive. She’s always been very frugal, and she clips every coupon and shops every sale at Noah’s Market. In fact I like to tease her that Noah actually loses money whenever she comes in the store.\n\n“I think she’s been taking it too far lately though. Once the subway fare increased, she stopped coming to visit me. And she’s really slow to respond to my texts. I hope she remembers to invite me to the family reunion next year.”\n\nCan you find her cousin’s phone number?\n:::\n\n::: {.callout-note collapse=\"false\" icon=\"false\"}\n## The crux of the puzzle\nThe relevant clue is in the tease: \"Noah actually loses money whenever she comes in the store\". \nThe bargain hunter is the person who most often causes Noah to lose money, \ni.e. the price she pays for an order is frequently less than the wholesale price of the items in that order.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncandle6 <- function(customers, orders, orders_items, products) {\n  inner_join(orders_items, products, by = \"sku\") |> \n    mutate(shop_price = qty * unit_price,\n           wholesale_price = qty * wholesale_cost) |> \n    summarise(order_shop_price = sum(shop_price), \n              order_wholesale_price = sum(wholesale_price), \n              .by = orderid) |> \n    filter(order_wholesale_price > order_shop_price) |> \n    inner_join(orders, by = \"orderid\") |> \n    count(customerid) |> \n    slice_max(n) |> \n    inner_join(customers, by = \"customerid\") |> \n    pull(phone)\n}\n\nbargain_hunter <- candle6(customers, orders, orders_items, products)\nbargain_hunter\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"585-838-9161\"\n```\n\n\n:::\n:::\n\n\n## Candle 7\n\n::: {.callout-note collapse=\"false\" icon=\"false\"}\n## Full puzzle text: The Meet Cute\n“Oh that tapestry, with the colorful toucan on it! I’ll tell you what happened to it.\n\n“One day, I was at Noah’s Market, and I was just about to leave when someone behind me said ‘Miss! You dropped something!’\n\n“Well I turned around to see this cute guy holding an item I had bought. He said, ‘I got the same thing!’ We laughed about it and wound up swapping items because I wanted the color he got. We had a moment when our eyes met and my heart stopped for a second. I asked him to get some food with me and we spent the rest of the day together.\n\n“Before long I moved into his place, but the romance faded quickly, as he wasn’t the prince I imagined. I left abruptly one night, forgetting the tapestry on his wall. But by then, it symbolized our love, and I wanted nothing more to do with it. For all I know, he still has it.”\n\nCan you figure out her ex-boyfriend’s phone number?\n:::\n\n::: {.callout-note collapse=\"false\" icon=\"false\"}\n## The crux of the puzzle\nThe meet cute is the person who bought the same item as the bargain hunter on the same date at roughly the same time, \njust in a different colour.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncandle7 <- function(customers, orders, orders_items, products, bargain_hunter) {\n  \n  # get info about the bargain hunter\n  bargain_hunter_id <- customers |> \n    filter(phone == bargain_hunter) |> \n    pull(customerid)\n  \n  bargain_hunter_orders <- customers |> \n    filter(phone == bargain_hunter) |> \n    inner_join(orders, by = \"customerid\") \n  \n  bargain_hunter_orders_dates <- bargain_hunter_orders |> \n    mutate(date = date(shipped)) |> \n    distinct(date) |> \n    pull(date)\n  \n  # Make regex for colours\n  colours <- products |> \n    filter(str_detect(desc, \"Jersey\")) |>  # 12 colours, all with COL in sku\n    arrange(desc) |> \n    separate_wider_regex(desc, c(item = \".*\", \" \", colour = \".*\")) |> \n    pull(colour) |> \n    paste(collapse = \"|\") |> \n    str_remove_all(\"\\\\(|\\\\)\") \n  # \"amber|azure|blue|green|magenta|mauve|orange|puce|purple|red|white|yellow\"\n  \n  # All orders with colours on the same date as the bargain hunter purchases\n  # (including the bargain hunter's purchases)\n  same_date_orders_colours <- orders |> \n    mutate(shipped_date = date(shipped)) |> \n    filter(shipped_date %in% bargain_hunter_orders_dates) |> \n    select(orderid, customerid, shipped, shipped_date) |> \n    left_join(orders_items, by = \"orderid\") |> \n    left_join(products, by = \"sku\") |> \n    select(-qty, -unit_price, -wholesale_cost, -dims_cm) |> \n    filter(str_detect(desc, colours)) |> \n    separate_wider_regex(desc, c(item = \".*\", \" \", colour = \".*\")) \n  # the last line seperates the `desc` column at the final deliminator of \" \".\n  \n  # separate into bargain hunter and possible meet cute\n  bh <- same_date_orders_colours |> \n    filter(customerid == bargain_hunter_id) |> \n    select(customerid, shipped_date, shipped, item, colour)\n  \n  possible_meet_cute <- same_date_orders_colours |> \n    filter(customerid != bargain_hunter_id) |> \n    select(customerid, shipped_date, shipped, item, colour)\n  \n  # Now join these together by item and date \n  # .x is bargain hunter, .y is possible meet cute\n  # find for row where colour is different and time is closest\n  # that's the meet cute, so join with customers and pull phone\n  inner_join(bh, possible_meet_cute, by = c(\"shipped_date\", \"item\")) |> \n    filter(colour.x != colour.y) |>\n    mutate(time_diff = abs(shipped.x - shipped.y)) |>\n    slice_min(time_diff) |>\n    left_join(customers, join_by(customerid.y == customerid)) |>\n    pull(phone)\n}\n\nmeet_cute <- candle7(customers, orders, orders_items, products, bargain_hunter) \nmeet_cute\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"838-335-7157\"\n```\n\n\n:::\n:::\n\n\nThis was the trickiest day, and my longest solution. \nIt was also the day with the biggest 'gotcha' for the speedrun, \nwhich turned out to be a delicious twist from the puzzle authors, \nand which it retrospect I'm kicking myself for not having accounted for.\n\nWhen I was investigating where colours appear in the `products` table,\nI knew from Candle 5 that the 'Jersey' comes in multiple colours.\nNarrowing in on one of those colours, `red`, I found there were seven types of item,\nthen that all of those seven had the same twelve colours.\nTheir descriptions all have the structure `\"Noah's Item (colour)\"` \n(for each combination of item and colour).\nMoreover, all 84 of those items have a `sku` that starts with `\"COL\"`;\na shorthand for 'colour', it was easy to presume. \nI double checked this by looking at all products that have a `sku` starting with `\"COL\"`\nand found 85 products. The extra one is `\"Noah's Ark Model (HO Scale)\"`, \n*no* colour, though with a similar extra descriptor in `()` after the final deliminator of `\" \"`. \nStill, I took a shortcut and instead of checking for items with a colour by regex,\nI initially filtered on having `\"COL\"` in the `sku` instead,\nknowing the one additional item wasn't going to cause a problem, \nsince even if both the bargain hunter and her meet cute bought this item, \nwe would filter it out as having the same \"colour\" \n(the regex to separate out items and colours puts the `(HO Scale)` in the colour column).\nI made a note at the time that I should come back and be more robust about filtering items with colours.\nI wish I'd taken my own advice! \nRunning my original function on the speedrun gave the wrong answer.\nIn the more \"challening\" dataset, \nthere are additional items with colours that *don't* have `\"COL\"` in their `sku`, and it's one of these that is the common item in this case.\nAt least I knew where the problem in my code was likely to be, and how to fix it.\n\nThe thing that makes it all the more frustrating that I didn't fix this before the speedrun is that \nthere's a massive clue later, as we'll soon see, that the assumption that `\"COL\"` stands for colour was wrong.\n\n## Candle 8\n\n::: {.callout-note collapse=\"false\" icon=\"false\"}\n## Full puzzle text: The Collector\n\n“Oh that damned woman! She moved in, clogged my bathtub, left her coupons all over the kitchen, and then just vanished one night without leaving so much as a note.\n\nExcept she did leave behind that nasty carpet. I spent months cleaning one corner, only to discover a snake hiding in the branches! I knew then that she was never coming back, and I had to get it out of my sight.\n\n“Well, I don’t have any storage here, and it didn’t seem right to sell it, so I gave it to my sister. She wound up getting a newer and more expensive carpet, so she gave it to an acquaintance of hers who collects all sorts of junk. Apparently he owns an entire set of Noah’s collectibles! He probably still has the carpet, even.\n\n“My sister is away for the holidays, but I can have her call you in a few weeks.”\n\nThe family dinner is tonight! Can you find the collector’s phone number in time?\n:::\n\n::: {.callout-note collapse=\"false\" icon=\"false\"}\n## The crux of the puzzle\nFind the person who owns an entire set (or at least the most) Noah's collectibles.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncandle8 <- function(customers, orders, orders_items, products) {\n  customers |> \n    inner_join(orders, by = \"customerid\") |> \n    inner_join(orders_items, by = \"orderid\") |> \n    inner_join(products, by = \"sku\") |> \n    filter(str_detect(desc, \"Noah\")) |> \n    count(phone, sort = TRUE) |> # unique phones, so equivalent to customer id\n    slice_max(n) |> \n    pull(phone)\n}\n\ncollector <- candle8(customers, orders, orders_items, products)\ncollector\t\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"212-547-3518\"\n```\n\n\n:::\n:::\n\n\nWe saw when working on the Candle 7 puzzle that there are items that have the name \"Noah\" in their description.\nIt seemed reasonable to assume that these are the collectibles and the code above got me the correct answers both first time and in the speedrun. \nI now realise, though, that I may have got doubly lucky and that my assumption was probably incorrect. \nBut let's look at the rug/epilogue first, to realise how tantilisingly close I came to figuring it out properly,\nand to revel in just how fine the storytelling and clue-dropping was.\n\n## The rug\n\n::: {.callout-note collapse=\"false\" icon=\"false\"}\n## The Eplilogue\n“Oh yes, that magnificant Persian carpet! An absolute masterpiece, with a variety of interesting animals congregating around a Tree of Life. As a collector, I couldn’t believe when it fell into my lap.\n\n“A friend of mine had taken it off her brother’s hands, and she didn’t know what to do with it. I saw her one day, and she was about to put an old rug out at the curb. It looked like it had been through a lot, but it was remarkably not that dirty. It still took quite a bit of effort and no small amount of rug cleaner, but ultimately I managed to get the last bits of grime out of it.\n\n“I actually live right down the street from Noah’s Market–I’m a huge fan and I shop there all the time! I even have a one-of-a-kind scale model of Noah’s Ark that makes a complete set of Noah’s collectibles.\n\n“I would love for Noah to have his rug once again to enjoy.”\n:::\n\nThe epilogue wraps up the story, and ties together a few clues.\nWe're hearing from the collector.\nThere's a mention of the Noah's Ark collectible---that 85th item found in the product list during our hunt for the meet cute for candle 7. \nAt this point, it was there to see: `\"COL\"` in the `sku` is for **col**lectible, *not* **col**our. So, instead of incorrectly filtering on this in my original candle 7 solution, I probably *should* have filtered on this in my candle 8 solution, not on the description containing the word `\"Noah\"`. There are several items that have `\"Noah\"` in their description that might not be collectibles, hence now considering myself lucky that my code for candle 8 worked.\n\nI expect that the COL/collectible/colour confusion was a deliberate \"gotcha\" on the part of [Saul Pwanson](https://www.saul.pw), the Hannukah of Data creator, \nAlthough it was initally frustrating that my speedrun wasn't entirely smooth, I'm also kind-of pleased I feel into the trap, \nbecause it's made me appreciate just how expertly the whole challenge has been crafted.\n\nOn the subject of expert crafting, \none of the delights of Hanukkah of Data is the animated ASCII art.\nWhen we land on the [homepage](https://hanukkah.bluebird.sh/) we see a menorah, \nthe nine-pronged candelabra that holds one candle for each night of Hanukkah\nplus the *shamash* which is used as the kindling light.\nAt first, there's just the shamash, then on each night of Hanukkah, another candle appears.\nSolving a day's puzzle lights the associated candle.\nThe picture I've used to accompany this post shows the state of the menorah at the beginning of the second night.\nAs each candle gets lit, it illuminates some of an image above.\nIt's such a treat to see the picture reveal itself, and link to the text.\nI didn't want to spoil the surprise for anyone by making the final artwork immediately visible, but for those who want to see it now, they can do so [here](https://ellakaye.co.uk/posts/2023-12-07_hanukkah-of-data-5784/hanukkah-of-data-rug.png){target=\"_blank\"}.\n\n## The speedrun\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\ncustomers <- read_csv(\"data/speedrun/noahs-customers.csv\")\norders <- read_csv(\"data/speedrun/noahs-orders.csv\")\norders_items <- read_csv(\"data/speedrun/noahs-orders_items.csv\")\nproducts <- read_csv(\"data/speedrun/noahs-products.csv\")\n\nspeedrun <- function(customers, orders, orders_items, products) {\n  investigator <- candle1(customers)\n  contractor <- candle2(customers, orders, orders_items, products, \"^D\", \"^S\")\n  years_goat <- c(1931, 1943, 1955, 1967, 1979, 1991, 2003, 2015)\n  neighbor <- candle3(customers, contractor, years_goat, 9)\n  early_bird <- candle4(customers, orders, orders_items)\n  cat_lady <- candle5(customers, orders, orders_items, products)\n  bargain_hunter <- candle6(customers, orders, orders_items, products)\n  meet_cute <- candle7(customers, orders, orders_items, products, bargain_hunter) \n  collector <- candle8(customers, orders, orders_items, products)\n  \n  cat(\"Investigator:\", investigator, \"\\n\") \n  cat(\"Contractor:\", contractor, \"\\n\") \n  cat(\"Neighbor:\", neighbor, \"\\n\") \n  cat(\"Early Bird:\", early_bird, \"\\n\") \n  cat(\"Cat Lady:\", cat_lady, \"\\n\") \n  cat(\"Bargain Hunter:\", bargain_hunter, \"\\n\") \n  cat(\"Meet Cute:\", meet_cute, \"\\n\") \n  cat(\"Collector:\", collector, \"\\n\") \n}\nspeedrun(customers, orders, orders_items, products) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nInvestigator: 767-365-7269 \nContractor: 838-351-0370 \nNeighbor: 914-594-5535 \nEarly Bird: 716-789-4433 \nCat Lady: 347-835-2358 \nBargain Hunter: 838-295-7143 \nMeet Cute: 516-544-4187 \nCollector: 516-638-9966 \n```\n\n\n:::\n:::\n\n\n## Conclusion\n\nI thoroughly enjoyed participating in Hanukkah of Data. \nI found the puzzles to be a lot of fun and enjoyed the storytelling that linked them.\nI loved the twist of the speedrun as a motivator for thinking about how to make my solutions robust.\nI learnt how to use new tidyverse functions, such as the `separate_wider_*()` family and `join_by()`, \nand I've been inspired to do some baking too!\nThere was a small group in the R4DS (R for Data Science) Slack working through the puzzles daily,\nand being part of that chat added an enjoyable sense of community and camaraderie.\nI very much hope the [talented team](https://hanukkah.bluebird.sh/credits/) run it again next year. \nI'm already looking forward to it.\n\n<!--------------- appendices go here ----------------->\n\n\n::: {.cell}\n::: {.cell-output-display}\n## Last updated {.appendix}\n \n2023-12-21 08:39:44.38971\n \n## Details {.appendix}\n \n[source code](https://github.com/EllaKaye/ellakaye.co.uk/tree/main/posts/2023-12-07_hanukkah-of-data-5784/index.qmd){target='_blank'}, [R environment](https://github.com/EllaKaye/ellakaye.co.uk/tree/main/posts/2023-12-07_hanukkah-of-data-5784/renv.lock){target='_blank'}\n:::\n:::\n\n\n##### Session info {.appendix}\n\n<details><summary>Toggle</summary>\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.3.2 (2023-10-31)\n os       macOS Sonoma 14.1\n system   aarch64, darwin20\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       Europe/London\n date     2023-12-21\n pandoc   3.1.1 @ /Applications/RStudio.app/Contents/Resources/app/quarto/bin/tools/ (via rmarkdown)\n quarto   1.4.526 @ /usr/local/bin/quarto\n\n─ Packages ───────────────────────────────────────────────────────────────────\n ! package     * version date (UTC) lib source\n P dplyr       * 1.1.4   2023-11-17 [?] CRAN (R 4.3.1)\n P forcats     * 1.0.0   2023-01-29 [?] CRAN (R 4.3.0)\n P ggplot2     * 3.4.4   2023-10-12 [?] CRAN (R 4.3.1)\n   lubridate   * 1.9.2   2023-02-10 [1] CRAN (R 4.3.0)\n   purrr       * 1.0.2   2023-08-10 [1] CRAN (R 4.3.0)\n P readr       * 2.1.4   2023-02-10 [?] CRAN (R 4.3.0)\n P sessioninfo * 1.2.2   2021-12-06 [?] CRAN (R 4.3.0)\n P stringr     * 1.5.0   2022-12-02 [?] CRAN (R 4.3.0)\n P tibble      * 3.2.1   2023-03-20 [?] CRAN (R 4.3.0)\n P tidyr       * 1.3.0   2023-01-24 [?] CRAN (R 4.3.0)\n P tidyverse   * 2.0.0   2023-02-22 [?] CRAN (R 4.3.0)\n\n [1] /Users/ellakaye/Rprojs/mine/ellakaye-quarto/renv/library/R-4.3/aarch64-apple-darwin20\n [2] /Users/ellakaye/Library/Caches/org.R-project.R/R/renv/sandbox/R-4.3/aarch64-apple-darwin20/ac5c2659\n\n P ── Loaded and on-disk path mismatch.\n\n──────────────────────────────────────────────────────────────────────────────\n```\n\n\n:::\n:::\n\n\n</details>\n\n\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}